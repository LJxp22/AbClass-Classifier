import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report
from sklearn.metrics import ConfusionMatrixDisplay
import matplotlib.pyplot as plt

def load_data(file_path):
    """Load and preprocess dataset"""
    data = pd.read_csv(file_path, encoding='gbk')
    data.drop("V1", axis=1, inplace=True)
    
    # Convert numeric columns and handle missing values
    numeric_columns = data.columns[1:]
    data[numeric_columns] = data[numeric_columns].apply(pd.to_numeric, errors='coerce')
    data.dropna(inplace=True)
    
    # Adjust labels to start from 0
    data['label'] = data['label'].astype('float32') - 1
    
    return data

def prepare_data(data):
    """Prepare training and test data"""
    X = data.drop('label', axis=1).values
    y = data['label'].values
    
    # Split dataset into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    # Standardize features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    return X_train_scaled, X_test_scaled, y_train, y_test, scaler

def train_model(X_train, y_train):
    """Train a Random Forest classifier"""
    model = RandomForestClassifier(
        n_estimators=165,            # Number of trees
        max_depth=4,                 # Maximum tree depth
        min_samples_leaf=5,          # Minimum samples per leaf
        oob_score=True,              # Use out-of-bag samples for evaluation
        random_state=42,             # Random seed for reproducibility
        n_jobs=-1,                   # Use all CPU cores
        class_weight='balanced'      # Balance class weights
    )
    
    model.fit(X_train, y_train)
    return model

def evaluate_model(model, X_test, y_test, class_names=None):
    """Evaluate model performance and generate visualizations"""
    # Predict on test set
    y_pred = model.predict(X_test)
    
    # Calculate overall accuracy
    accuracy = accuracy_score(y_test, y_pred)
    print(f"\nOverall Accuracy: {accuracy:.4f}")
    print(f"Out-of-Bag Estimated Accuracy: {model.oob_score_:.4f}")
    
    # Print confusion matrix
    conf_matrix = confusion_matrix(y_test, y_pred)
    print("\nConfusion Matrix:")
    print(conf_matrix)
    
    # Plot confusion matrix
    plt.figure(figsize=(10, 8))
    cm_display = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=class_names)
    cm_display.plot(cmap='Blues')
    plt.title('Confusion Matrix')
    plt.tight_layout()
    plt.show()
    
    # Print classification report
    print("\nClassification Report:")
    report = classification_report(y_test, y_pred, target_names=class_names)
    print(report)
    
    return accuracy, conf_matrix, report

def main():
    """Main workflow"""
    file_path = "path/to/your/data.csv"  # Replace with actual data path
    
    # Define class names (adjust according to your data)
    class_names = ['Class 1', 'Class 2', 'Class 3', 'Class 4', 'Class 5']
    
    try:
        # Load data
        data = load_data(file_path)
        print(f"Data loaded successfully with {len(data)} samples")
        
        # Prepare data
        X_train, X_test, y_train, y_test, scaler = prepare_data(data)
        print(f"Training set size: {len(X_train)}, Test set size: {len(X_test)}")
        
        # Train model
        model = train_model(X_train, y_train)
        print("Model training completed")
        
        # Evaluate model
        evaluate_model(model, X_test, y_test, class_names)
        
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    main()

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import (
    confusion_matrix, accuracy_score, classification_report,
    precision_score, recall_score, f1_score
)
from sklearn.metrics import ConfusionMatrixDisplay
import matplotlib.pyplot as plt

def load_data(file_path):
    """Load and preprocess dataset"""
    data = pd.read_csv(file_path, encoding='gbk')
    data.drop("V1", axis=1, inplace=True)
    
    # Convert numeric columns and handle missing values
    numeric_columns = data.columns[1:]
    data[numeric_columns] = data[numeric_columns].apply(pd.to_numeric, errors='coerce')
    data.dropna(inplace=True)
    
    # Adjust labels to start from 0
    data['label'] = data['label'].astype('float32') - 1
    
    print(f"Data loaded successfully, {len(data)} samples remaining")
    return data

def prepare_data(data):
    """Prepare training and test data"""
    X = data.drop('label', axis=1).values
    y = data['label'].values
    
    # Stratified split to maintain class distribution
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )
    
    # Standardize features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    
    print(f"Training set size: {len(X_train)}, Test set size: {len(X_test)}")
    return X_train_scaled, X_test_scaled, y_train, y_test, scaler

def train_model(X_train, y_train):
    """Train Random Forest classifier with class balancing"""
    model = RandomForestClassifier(
        n_estimators=165,            # Number of trees
        max_depth=4,                 # Maximum tree depth
        min_samples_leaf=5,          # Minimum samples per leaf
        oob_score=True,              # Use out-of-bag evaluation
        random_state=42,             # Reproducible results
        n_jobs=-1,                   # Use all CPU cores
        class_weight='balanced'      # Balance class weights
    )
    
    model.fit(X_train, y_train)
    print("Model training completed")
    return model

def evaluate_model(model, X_test, y_test, class_names=None):
    """Evaluate model with weighted metrics and visualizations"""
    # Make predictions on test set
    y_pred = model.predict(X_test)
    
    # Calculate overall accuracy
    overall_accuracy = accuracy_score(y_test, y_pred)
    print(f"\nOverall Accuracy: {overall_accuracy:.4f}")
    print(f"Out-of-Bag Accuracy: {model.oob_score_:.4f}")
    
    # Calculate weighted metrics
    weighted_precision = precision_score(y_test, y_pred, average='weighted', zero_division=0)
    weighted_recall = recall_score(y_test, y_pred, average='weighted', zero_division=0)
    weighted_f1 = f1_score(y_test, y_pred, average='weighted', zero_division=0)
    
    print(f"Weighted Precision: {weighted_precision:.4f}")
    print(f"Weighted Recall: {weighted_recall:.4f}")
    print(f"Weighted F1-Score: {weighted_f1:.4f}")
    
    # Confusion matrix
    conf_matrix = confusion_matrix(y_test, y_pred)
    print("\nConfusion Matrix:")
    print(conf_matrix)
    
    # Plot confusion matrix
    plt.figure(figsize=(10, 8))
    cm_display = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=class_names)
    cm_display.plot(cmap='Blues', values_format='d')
    plt.title('Confusion Matrix (Weighted Metrics)')
    plt.tight_layout()
    plt.show()
    
    # Generate weighted classification report
    print("\nWeighted Classification Report:")
    report = classification_report(
        y_test, y_pred, 
        target_names=class_names,
        average='weighted',
        zero_division=0
    )
    print(report)
    
    return {
        "accuracy": overall_accuracy,
        "oob_accuracy": model.oob_score_,
        "weighted_precision": weighted_precision,
        "weighted_recall": weighted_recall,
        "weighted_f1": weighted_f1,
        "confusion_matrix": conf_matrix,
        "report": report
    }
